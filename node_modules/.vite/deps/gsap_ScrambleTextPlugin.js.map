{
  "version": 3,
  "sources": ["../../gsap/ScrambleTextPlugin.js"],
  "sourcesContent": ["/*!\n * ScrambleTextPlugin 3.13.0\n * https://gsap.com\n *\n * @license Copyright 2008-2025, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { emojiSafeSplit, getText } from \"./utils/strings.js\";\n\nvar CharSet = /*#__PURE__*/function () {\n  function CharSet(chars) {\n    this.chars = emojiSafeSplit(chars);\n    this.sets = [];\n    this.length = 50;\n\n    for (var i = 0; i < 20; i++) {\n      this.sets[i] = _scrambleText(80, this.chars); //we create 20 strings that are 80 characters long, randomly chosen and pack them into an array. We then randomly choose the scrambled text from this array in order to greatly improve efficiency compared to creating new randomized text from scratch each and every time it's needed. This is a simple lookup whereas the other technique requires looping through as many times as there are characters needed, and calling Math.random() each time through the loop, building the string, etc.\n    }\n  }\n\n  var _proto = CharSet.prototype;\n\n  _proto.grow = function grow(newLength) {\n    //if we encounter a tween that has more than 80 characters, we'll need to add to the character sets accordingly. Once it's cached, it'll only need to grow again if we exceed that new length. Again, this is an efficiency tactic.\n    for (var i = 0; i < 20; i++) {\n      this.sets[i] += _scrambleText(newLength - this.length, this.chars);\n    }\n\n    this.length = newLength;\n  };\n\n  return CharSet;\n}();\n\nvar gsap,\n    _coreInitted,\n    _getGSAP = function _getGSAP() {\n  return gsap || typeof window !== \"undefined\" && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _bonusValidated = 1,\n    //<name>ScrambleTextPlugin</name>\n_spacesExp = /\\s+/g,\n    _scrambleText = function _scrambleText(length, chars) {\n  var l = chars.length,\n      s = \"\";\n\n  while (--length > -1) {\n    s += chars[~~(Math.random() * l)];\n  }\n\n  return s;\n},\n    _upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    _lower = _upper.toLowerCase(),\n    _charsLookup = {\n  upperCase: new CharSet(_upper),\n  lowerCase: new CharSet(_lower),\n  upperAndLowerCase: new CharSet(_upper + _lower)\n},\n    _initCore = function _initCore() {\n  _coreInitted = gsap = _getGSAP();\n};\n\nexport var ScrambleTextPlugin = {\n  version: \"3.13.0\",\n  name: \"scrambleText\",\n  register: function register(core, Plugin, propTween) {\n    gsap = core;\n\n    _initCore();\n  },\n  init: function init(target, value, tween, index, targets) {\n    _coreInitted || _initCore();\n    this.prop = \"innerHTML\" in target ? \"innerHTML\" : \"textContent\" in target ? \"textContent\" : 0; // SVG text in IE doesn't have innerHTML, but it does have textContent.\n\n    if (!this.prop) {\n      return;\n    }\n\n    this.target = target;\n\n    if (typeof value !== \"object\") {\n      value = {\n        text: value\n      };\n    }\n\n    var text = value.text || value.value || \"\",\n        trim = value.trim !== false,\n        data = this,\n        delim,\n        maxLength,\n        charset,\n        splitByChars;\n    data.delimiter = delim = value.delimiter || \"\";\n    data.original = emojiSafeSplit(getText(target).replace(_spacesExp, \" \").split(\"&nbsp;\").join(\"\"), delim, trim);\n\n    if (text === \"{original}\" || text === true || text == null) {\n      text = data.original.join(delim);\n    }\n\n    data.text = emojiSafeSplit((text || \"\").replace(_spacesExp, \" \"), delim, trim);\n    data.hasClass = !!(value.newClass || value.oldClass);\n    data.newClass = value.newClass;\n    data.oldClass = value.oldClass;\n    splitByChars = delim === \"\";\n    data.textHasEmoji = splitByChars && !!data.text.emoji;\n    data.charsHaveEmoji = !!value.chars && !!emojiSafeSplit(value.chars).emoji;\n    data.length = splitByChars ? data.original.length : data.original.join(delim).length;\n    data.lengthDif = (splitByChars ? data.text.length : data.text.join(delim).length) - data.length;\n    data.fillChar = value.fillChar || value.chars && ~value.chars.indexOf(\" \") ? \"&nbsp;\" : \"\";\n    data.charSet = charset = _charsLookup[value.chars || \"upperCase\"] || new CharSet(value.chars);\n    data.speed = 0.05 / (value.speed || 1);\n    data.prevScrambleTime = 0;\n    data.setIndex = Math.random() * 20 | 0;\n    maxLength = data.length + Math.max(data.lengthDif, 0);\n\n    if (maxLength > charset.length) {\n      charset.grow(maxLength);\n    }\n\n    data.chars = charset.sets[data.setIndex];\n    data.revealDelay = value.revealDelay || 0;\n    data.tweenLength = value.tweenLength !== false;\n    data.tween = tween;\n    data.rightToLeft = !!value.rightToLeft;\n\n    data._props.push(\"scrambleText\", \"text\");\n\n    return _bonusValidated;\n  },\n  render: function render(ratio, data) {\n    var target = data.target,\n        prop = data.prop,\n        text = data.text,\n        delimiter = data.delimiter,\n        tween = data.tween,\n        prevScrambleTime = data.prevScrambleTime,\n        revealDelay = data.revealDelay,\n        setIndex = data.setIndex,\n        chars = data.chars,\n        charSet = data.charSet,\n        length = data.length,\n        textHasEmoji = data.textHasEmoji,\n        charsHaveEmoji = data.charsHaveEmoji,\n        lengthDif = data.lengthDif,\n        tweenLength = data.tweenLength,\n        oldClass = data.oldClass,\n        newClass = data.newClass,\n        rightToLeft = data.rightToLeft,\n        fillChar = data.fillChar,\n        speed = data.speed,\n        original = data.original,\n        hasClass = data.hasClass,\n        l = text.length,\n        time = tween._time,\n        timeDif = time - prevScrambleTime,\n        i,\n        i2,\n        startText,\n        endText,\n        applyNew,\n        applyOld,\n        str,\n        startClass,\n        endClass,\n        position,\n        r;\n\n    if (revealDelay) {\n      if (tween._from) {\n        time = tween._dur - time; //invert the time for from() tweens\n      }\n\n      ratio = time === 0 ? 0 : time < revealDelay ? 0.000001 : time === tween._dur ? 1 : tween._ease((time - revealDelay) / (tween._dur - revealDelay));\n    }\n\n    if (ratio < 0) {\n      ratio = 0;\n    } else if (ratio > 1) {\n      ratio = 1;\n    }\n\n    if (rightToLeft) {\n      ratio = 1 - ratio;\n    }\n\n    i = ~~(ratio * l + 0.5);\n\n    if (ratio) {\n      if (timeDif > speed || timeDif < -speed) {\n        data.setIndex = setIndex = (setIndex + (Math.random() * 19 | 0)) % 20;\n        data.chars = charSet.sets[setIndex];\n        data.prevScrambleTime += timeDif;\n      }\n\n      endText = chars;\n    } else {\n      endText = original.join(delimiter);\n    }\n\n    r = tween._from ? ratio : 1 - ratio;\n    position = length + (tweenLength ? tween._from ? r * r * r : 1 - r * r * r : 1) * lengthDif;\n\n    if (rightToLeft) {\n      if (ratio === 1 && (tween._from || tween.data === \"isFromStart\")) {\n        //special case for from() tweens\n        startText = \"\";\n        endText = original.join(delimiter);\n      } else {\n        str = text.slice(i).join(delimiter);\n\n        if (charsHaveEmoji) {\n          startText = emojiSafeSplit(endText).slice(0, position - (textHasEmoji ? emojiSafeSplit(str) : str).length + 0.5 | 0).join(\"\");\n        } else {\n          startText = endText.substr(0, position - (textHasEmoji ? emojiSafeSplit(str) : str).length + 0.5 | 0);\n        }\n\n        endText = str;\n      }\n    } else {\n      startText = text.slice(0, i).join(delimiter);\n      i2 = (textHasEmoji ? emojiSafeSplit(startText) : startText).length;\n\n      if (charsHaveEmoji) {\n        endText = emojiSafeSplit(endText).slice(i2, position + 0.5 | 0).join(\"\");\n      } else {\n        endText = endText.substr(i2, position - i2 + 0.5 | 0);\n      }\n    }\n\n    if (hasClass) {\n      startClass = rightToLeft ? oldClass : newClass;\n      endClass = rightToLeft ? newClass : oldClass;\n      applyNew = startClass && i !== 0;\n      applyOld = endClass && i !== l;\n      str = (applyNew ? \"<span class='\" + startClass + \"'>\" : \"\") + startText + (applyNew ? \"</span>\" : \"\") + (applyOld ? \"<span class='\" + endClass + \"'>\" : \"\") + delimiter + endText + (applyOld ? \"</span>\" : \"\");\n    } else {\n      str = startText + delimiter + endText;\n    }\n\n    target[prop] = fillChar === \"&nbsp;\" && ~str.indexOf(\"  \") ? str.split(\"  \").join(\"&nbsp;&nbsp;\") : str;\n  }\n};\nScrambleTextPlugin.emojiSafeSplit = emojiSafeSplit;\nScrambleTextPlugin.getText = getText;\n_getGSAP() && gsap.registerPlugin(ScrambleTextPlugin);\nexport { ScrambleTextPlugin as default };"],
  "mappings": "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",
  "names": ["CharSet", "_getGSAP", "_scrambleText", "_initCore"]
}
